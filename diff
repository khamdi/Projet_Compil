2c2,3
< #include "tpc.h"
---
>   #include "struct.h"
>   #include "tpc.h"
9,10c10
< id		[A-Za-z_][A-Za-z_0-9]*
< num 	[0-9]+
---
> %x COMM
12a13,52
> "/*" {BEGIN COMM;}
> <COMM>"*/" {BEGIN INITIAL;}
> <COMM>.|\n;
> 
> [ \t\n]+ ;
> 
> int|char {sscanf(yytext,"%s",yylval.type); return TYPE;}
> const {return CONST;}
> 
> if {return IF;}
> else {return ELSE;}
> while {return WHILE;}
> 
> void {return VOID;}
> return {return RETURN;}
> 
> \( {return LPAR;}
> \) {return RPAR;}
> \{ {return LCUR;}
> \} {return RCUR;}
> \[ {return LSQB;}
> \] {return RSQB;}
> 
> = {return EGAL;}
> ; {return PV;}
> , {return VRG;}
> 
> ==|!=|<|>|<=|>= {sscanf(yytext,"%s",yylval.comp); return COMP;}
> ! {return NEGATION;}
> -|\+ {sscanf(yytext,"%c",&yylval.addsub); return ADDSUB;}
> \*|\/|% {sscanf(yytext,"%c",&yylval.divstar); return DIVSTAR;}
> \|\||&& {sscanf(yytext,"%s",yylval.bope); return BOPE;}
> 
> print {return PRINT;}
> read {return READ;}
> readch {return READCH;}
> 
> [0-9]+ {sscanf(yytext,"%d",&yylval.num); return NUM;}
> [A-Za-z][A-Za-z0-9]* {sscanf(yytext,"%s",yylval.ident); return IDENT;}
> \'[A-Za-z]\' {sscanf(yytext+1,"%c",&yylval.caractere); return CARACTERE;}
14,48c54
< [ \t\n]						;
< if							{return IF;}
< else						{return ELSE;}
< while						{return WHILE;}
< return						{return RETURN;}
< print						{return PRINT;}
< read						{return READ;}
< readch						{return READCH;}
< const						{return CONST;}
< 
< main						{return MAIN;}
< void						{return VOID;}
< 
< "entier"|"caractere"		{return TYPE;}
< {num}						{sscanf(yytext,"%d",&(yylval.val)); return NUM;}
< '[A-Za-z0-9]'				{return CARACTERE;}
< 
< {id}						{snprintf (yylval.id,64,"%s",yytext); return IDENT;}
< 
< "=="|"<="|">="|"!="|"<"|">" {snprintf (yylval.bop, 3, "%s", yytext); return COMP;}
< =							{return EGAL;}
< [+-]						{sscanf (yytext, "%c, &(yylval.op)); return ADDSUB;}
< [*/%]						{sscanf (yytext, "%c, &(yylval.op)); return DIVSTAR;}
< "&&"|"||"					{snprintf (yylval.bop, 3, "%s", yytext); return BOPE;}
< !							{return NEGATION;}
< 
< ;							{return PV;}
< ,							{return VRG;}
< (							{return LPAR;}
< )							{return RPAR;}
< {							{return LCUR;}
< }							{return RCUR;}
< [							{return LSQB;}
< ]							{return RSQB;}
< .							return yytext[0];
---
> . return yytext[0];
